#!/usr/bin/env python

import sys
import os
import subprocess
import getopt

usage = '''Usage:
  %s [ options ] filename

Options:
  -h, --help            Show this help message and exit
  -e ..., --editor=...  Set the source code editor
  -p, --parents         Create parent folders as needed
''' % os.path.basename( sys.argv[ 0 ] )

editor = os.getenv( 'EDITOR', 'vim' )
parents = False

def nameJoin( args ):
    return ''.join( a.capitalize() for a in args )

def makeParents( dirs ):
    path = ''
    for subdir in dirs:
        path = os.path.join( path, subdir )
        if not os.path.exists( path ):
            os.mkdir( path )

def rabbitEdit( filename, editor, parents ):
    if not os.path.exists( filename ):
        parts = filename.split( '/' )
        parts.reverse()
        first = parts.pop()
        if parts:
            parts.reverse()
            parts[ -1 ] = parts[ -1 ].split( '.', 1 )[ 0 ]
            try:
                templateFile = open( os.path.join( '/etc/rabbitedit', first ) )
                template = templateFile.read()
                templateFile.close()
                if first == 'libs':
                    name = nameJoin( parts )
                    values = tuple( [ name ] * 3 + [ name.lower() + 's' ] )
                    source = template % values
                else:
                    source = template % nameJoin( [ first[ :-1 ] ] + parts )
            except IOError:
                source = ''
            try:
                if parents:
                    makeParents( [ first ] + parts[ :-1 ] )
                sourceFile = open( filename, 'w' )
                sourceFile.write( source )
                sourceFile.close()
            except IOError, message:
                sys.exit( message )
    subprocess.call( ( editor, filename ) )

try:
    opts, args = getopt.getopt( sys.argv[ 1: ], 'he:p', ( 'help', 'editor=', 'parents' ) )
    if len( args ) != 1:
        raise getopt.GetoptError, ''
    for option, value in opts:
        if option in ( '-h', '--help' ):
            print usage
            sys.exit()
        if option in ( '-e', '--editor' ):
            editor = value
        elif option in ( '-p', '--parents' ):
            parents = True
    rabbitEdit( args[ 0 ], editor, parents )
except getopt.GetoptError:
    sys.exit( usage )
