#!/usr/bin/env python

import sys
import os
import subprocess
import re
import getopt
import ConfigParser

def unique( sequence ):
	result = []
	for item in sequence:
		if item not in result:
			result.append( item )
	return result

def execute( *args ):
    subprocess.call( args )

def nameJoin( args ):
    return ''.join( a.capitalize() for a in args )

def plural( noun ):
	rules = open( '/etc/rabbitedit/rules' )
	for line in rules:
		pattern, search, replace = line.split()
		if re.search( pattern, noun ):
			rules.close()
			return re.sub( search, replace, noun )

def makeParents( dirs, svn ):
    path = ''
    for subdir in dirs:
        path = os.path.join( path, subdir )
        if not os.path.exists( path ):
            os.mkdir( path )
            if svn:
                execute( 'svn', 'add', path )

def rabbitEdit( filename, editor, parents, svn ):
    if not os.path.exists( filename ):
        parts = filename.split( '/' )
        parts.reverse()
        first = parts.pop()
        source = ''
        if parts:
            parts.reverse()
            parts[ -1 ] = parts[ -1 ].split( '.', 1 )[ 0 ]
            try:
                templateFile = open( os.path.join( '/etc/rabbitedit/templates', first ) )
                template = templateFile.read()
                templateFile.close()
                if first == 'libs':
                    name = nameJoin( unique( parts ) )
                    values = tuple( [ name ] * 3 + [ plural( name.lower() ) ] )
                    source = template % values
                else:
                    source = template % nameJoin( [ first[ :-1 ] ] + parts )
            except IOError:
                pass
        if not source:
            ext = os.path.splitext( filename )[ 1 ]
            if ext == '.php':
                templateFile = open( '/etc/rabbitedit/templates/default' )
                source = templateFile.read()
                templateFile.close()
        try:
            if parts:
                makeParents( [ first ] + parts[ :-1 ], svn )
            sourceFile = open( filename, 'w' )
            sourceFile.write( source )
            sourceFile.close()
            if svn:
                execute( 'svn', 'add', filename )
        except IOError, message:
            sys.exit( message )
    execute( editor, filename )

usage = '''Usage:
  %s [options] filename

Options:
  -h, --help            Show this help message and exit
  -e ..., --editor=...  Set the source code editor
  -p, --parents         Create parent directories as needed
  -s, --svn             Svn add the created file
  -c ..., --conf=...    Set the configuration file
  -P, --no-parents      Do not create parent folders
  -S, --no-svn          Do not svn add the created file
''' % os.path.basename( sys.argv[ 0 ] )

try:
    opts, args = getopt.getopt( sys.argv[ 1: ], 'he:psc:PS', ( 'help', 'editor=', 'parents', 'svn', 'conf=', 'no-parents', 'no-svn' ) )
    if len( args ) != 1:
        raise getopt.GetoptError, ''
except getopt.GetoptError:
    sys.exit( usage )

config = {}
for option, value in opts:
    if option in ( '-h', '--help' ):
        print usage
        sys.exit()
    if option in ( '-e', '--editor' ):
        config[ 'editor' ] = value
    elif option in ( '-p', '--parents' ):
        config[ 'parents' ] = True
    elif option in ( '-s', '--svn' ):
        config[ 'svn' ] = True
    elif option in ( '-c', '--conf' ):
        config[ 'conf' ] = value
    elif option in ( '-P', '--no-parents' ):
        config[ 'parents' ] = False
    else:
        config[ 'svn' ] = False

conffile = config.get( 'conf', '/etc/rabbitedit/rabbitedit.conf' )
parser = ConfigParser.ConfigParser()
try:
    parser.read( conffile )
    editor = config.get( 'editor', parser.get( 'rabbitedit', 'editor' ) )
    if editor == 'default':
        editor = os.getenv( 'EDITOR', 'vim' )
    parents = config.get( 'parents', parser.getboolean( 'rabbitedit', 'parents' ) )
    svn = config.get( 'svn', parser.getboolean( 'rabbitedit', 'svn' ) )
except ( IOError, ConfigParser.Error ), message:
    sys.exit( message )

rabbitEdit( args[ 0 ], editor, parents, svn )
